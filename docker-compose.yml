# ========================================
# DOCKER COMPOSE - Multi-Container Application Orchestration
# ========================================
# Docker Compose allows us to define and run multi-container applications
# This file describes how to run our MERN stack app with all its services

# COMPOSE FILE VERSION
# Different versions support different features - 3.8 is a stable, feature-rich version
version: '3.8'

# ========================================
# SERVICES DEFINITION
# ========================================
# Services are the different parts of our application
# Each service runs in its own container (isolated environment)
services:

  # ========================================
  # MONGODB DATABASE SERVICE
  # ========================================
  mongodb:
    # PRE-BUILT IMAGE FROM DOCKER HUB
    # Instead of building our own, we use official MongoDB image
    # "latest" tag gets the most recent stable version
    image: mongo:latest
    
    # CONTAINER NAME
    # Custom name for this container (easier than random Docker-generated names)
    container_name: mern-auth-mongodb
    
    # PORT MAPPING
    # Format: "host_port:container_port"
    # Maps port 27017 on your computer to port 27017 inside container
    # This allows our backend to connect to MongoDB
    ports:
      - "27017:27017"
    
    # ENVIRONMENT VARIABLES
    # Configuration passed to the MongoDB container
    environment:
      # Create a database named "mernauth" when container starts
      - MONGO_INITDB_DATABASE=mernauth
    
    # VOLUMES - DATA PERSISTENCE
    # Containers are temporary - volumes preserve data when container stops/restarts
    volumes:
      # "mongodb_data" volume stores database files
      # Maps to "/data/db" (where MongoDB stores data inside container)
      - mongodb_data:/data/db
    
    # NETWORKS
    # Allows containers to communicate with each other
    networks:
      - mern-network

  # ========================================
  # BACKEND API SERVICE
  # ========================================
  backend:
    # BUILD FROM DOCKERFILE
    # Instead of using pre-built image, build our own from ./backend/Dockerfile
    build: ./backend
    
    container_name: mern-auth-backend
    
    # PORT MAPPING
    # Maps port 5000 on your computer to port 5000 inside container
    ports:
      - "5000:5000"
    
    # ENVIRONMENT VARIABLES FOR BACKEND
    # These override the values in .env file
    environment:
      - NODE_ENV=production                    # Tells Node.js this is production
      - MONGODB_URI=mongodb://mongodb:27017/mernauth  # Database connection string
      # Note: "mongodb" here refers to the service name above, not localhost
      - JWT_SECRET=your_super_secret_jwt_key_here_change_this_in_production
    
    # SERVICE DEPENDENCIES
    # Backend needs database to be running first
    depends_on:
      - mongodb  # Start MongoDB before starting backend
    
    networks:
      - mern-network
    
    # VOLUMES FOR DEVELOPMENT
    # Mount local code directory into container for hot-reloading
    volumes:
      - ./backend:/app           # Maps local ./backend to /app in container
      - /app/node_modules       # Prevents local node_modules from overriding container's

  # ========================================
  # FRONTEND REACT SERVICE
  # ========================================
  frontend:
    # BUILD FROM DOCKERFILE
    build: ./frontend
    
    container_name: mern-auth-frontend
    
    # PORT MAPPING
    # Maps port 3000 on your computer to port 3000 inside container
    ports:
      - "3000:3000"
    
    # DEPENDENCIES
    # Frontend needs backend API to be running
    depends_on:
      - backend
    
    networks:
      - mern-network
    
    # VOLUMES FOR DEVELOPMENT
    volumes:
      - ./frontend:/app         # Maps local ./frontend to /app in container
      - /app/node_modules      # Prevents local node_modules conflicts

# ========================================
# VOLUMES DEFINITION
# ========================================
# Named volumes that can be shared between containers or persist data
volumes:
  # MONGODB DATA VOLUME
  # Stores database files permanently - survives container restarts
  # Docker manages where this is actually stored on your computer
  mongodb_data:

# ========================================
# NETWORKS DEFINITION  
# ========================================
# Custom networks allow containers to communicate securely
networks:
  # CUSTOM BRIDGE NETWORK
  # All services connected to this network can communicate with each other
  # They can use service names (like "mongodb", "backend") as hostnames
  mern-network:
    driver: bridge  # Bridge driver allows containers on same host to communicate

# ========================================
# HOW TO USE THIS FILE
# ========================================
# Commands:
# docker-compose up          - Start all services
# docker-compose up -d       - Start all services in background
# docker-compose down        - Stop all services
# docker-compose build       - Rebuild all custom images
# docker-compose logs        - View logs from all services
# docker-compose ps          - List running containers

# ========================================
# NETWORKING EXPLANATION
# ========================================
# When containers start:
# - Frontend can access backend at: http://backend:5000
# - Backend can access database at: mongodb://mongodb:27017
# - Your computer can access:
#   - Frontend at: http://localhost:3000
#   - Backend at: http://localhost:5000
#   - Database at: mongodb://localhost:27017